//version '2.0'

apply plugin: 'war'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations {
    mybatisGenerator
}

def getDbProperties = {
    def properties = new Properties()
    def dbPropertiesPath = "/data/program/qianyi/config";
    file("$dbPropertiesPath/db.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}

repositories {
    mavenLocal()
    mavenCentral()
    maven{ url 'http://repository.jboss.org/nexus/content/groups/public/'}
}

//统一编码为utf-8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//依赖
dependencies {
    // maven仓库中心没有的jar，则放入libs目录下
    compile fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: '*.jar')
    // 核心依赖
    compile 'org.springframework:spring-webmvc:4.3.2.RELEASE'
    compile 'org.springframework:spring-orm:4.3.2.RELEASE'
    compile 'org.springframework:spring-context-support:4.3.2.RELEASE'
    compile 'org.springframework.data:spring-data-jpa:1.10.2.RELEASE'
    compile 'org.springframework:spring-aspects:4.3.2.RELEASE'
    compile 'mysql:mysql-connector-java:6.0.3'
    compile 'org.mybatis:mybatis:3.4.1'
    compile 'org.mybatis:mybatis-spring:1.3.0'
    compile 'com.github.pagehelper:pagehelper:4.1.6'
    compile 'tk.mybatis:mapper:3.3.8'
    compile 'com.google.guava:guava:19.0'
    compile 'ognl:ognl:3.0.19'
    // C3P0数据库连接池（）
    compile 'c3p0:c3p0:0.9.1.2'
    // druid数据库连接池
    compile 'com.alibaba:druid:1.0.25'
    // tomcat jdbc 数据库连接池
    compile 'org.apache.tomcat:tomcat-jdbc:8.0.33'
    // 日志依赖
    compile 'commons-logging:commons-logging:1.2'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    // 工具包
    compile 'commons-lang:commons-lang:2.6'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'org.apache.httpcomponents:httpclient:4.3.1'
    //compile 'com.kenai.nbpwr:org-apache-commons-dbcp:1.2.2-201002241055'
    // 测试
    testCompile group: 'junit', name: 'junit', version:'3.8.1'
    // 自动工具
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'org.springframework:spring-webmvc:4.3.2.RELEASE'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
    mybatisGenerator 'tk.mybatis:mapper:3.3.8'
    mybatisGenerator fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: '*.jar')

}

eclipse {
    classpath {
        downloadSources=true
    }
}

eclipse.classpath.file {
    withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
    }
}

task mybatisGenerate << {
    def prop = getDbProperties()

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClassName'] = prop.getProperty('driverClassName')
    ant.properties['url'] = prop.getProperty('url')
    ant.properties['username'] = prop.getProperty('username')
    ant.properties['password'] = prop.getProperty('password')

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'username')
            propertyref(name: 'driverClassName')
            propertyref(name: 'url')
            propertyref(name: 'password')
        }
    }
}
